substitutions:
  device_name: 'esp-office-workstation'
  friendly_name: 'Workstation'
  ap_pw: 'L2i5rbTy5Fa7'
  ssid: !secret wifi_ssid
  ssid_pw: !secret wifi_password

esphome:
  name: '${device_name}'
  libraries:
    - 'ESP32 BLE Arduino'

esp32:
  board: esp32dev
  framework:
    # type: esp-idf
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: $ssid
  password: $ssid_pw
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: AP_${device_name}
    password: $ap_pw
# Only for arduino framework
# captive_portal: 

# BEGIN TIMOTION INTEGRATION
external_components:
  # - source:
  #     type: local
  #     path: components/esphome-timotion-desk-controller/components
  - source: github://kevintong116/esphome-timotion-desk-controller@main

globals:
  # To store the Desk Connection Status
  - id: desk_client_connected
    type: bool
    initial_value: 'false'

esp32_ble_tracker:

ble_client:
  - mac_address: '00:00:00:00:00:00' # Replace with the desk bluetooth mac address
    id: timotion_desk
    on_connect:
      then:
        - lambda: |-
            id(desk_client_connected) = true;
        - delay: 5s
        - lambda: |-
            id(desk_state).update();
            id(desk_height).update();
    on_disconnect:
      then:
        - lambda: |-
            id(desk_client_connected) = false;

timotion_desk_controller:
  ble_client_id: timotion_desk
  # Optional -- todo remove
  only_up_down_command: true

cover:
  - platform: timotion_desk_controller
    name: 'Standing Desk'

sensor:
  # Desk Height Sensor
  - platform: ble_client
    type: characteristic
    ble_client_id: timotion_desk
    id: desk_height
    name: 'Desk Height'
    service_uuid: '6e400001-b5a3-f393-e0a9-e50e24dcca9e'
    characteristic_uuid: '6e400003-b5a3-f393-e0a9-e50e24dcca9e'
    icon: 'mdi:arrow-up-down'
    unit_of_measurement: 'cm'
    accuracy_decimals: 0
    update_interval: never
    notify: true
    # filters:
    #   - lambda: |-
    #       static float last_value = NAN;
    #       if (x != last_value) {
    #         last_value = x;
    #         return x;
    #       }
    #       return {};
    # or just delta filter :D
    filters:
      - delta: 0.1
    lambda: |-
      static float last_value = NAN;
      if (x[1] == 1) {
        uint16_t raw_height =  ((uint16_t)x[6] << 8) | x[7];
        unsigned short height_mm = raw_height / 10;
        last_value = height_mm;
        return (float) height_mm;
      }
      return last_value;

  # Desk Speed Sensor
  - platform: ble_client
    type: characteristic
    ble_client_id: timotion_desk
    id: desk_state
    name: 'Desk State'
    service_uuid: '6e400001-b5a3-f393-e0a9-e50e24dcca9e'
    characteristic_uuid: '6e400003-b5a3-f393-e0a9-e50e24dcca9e'
    icon: 'mdi:arrow-split-horizontal'
    accuracy_decimals: 0
    update_interval: never
    notify: true
    filters:
      - delta: 0.1
    lambda: |-
      uint16_t raw_speed = x[4];
      if (raw_speed == 101) return -1;
      if (raw_speed == 85) return 1;
      return 0;

binary_sensor:
  # Desk Bluetooth Connection Status
  - platform: template
    name: 'Desk Connection'
    icon: 'mdi:bluetooth'
    id: desk_connection
    lambda: 'return id(desk_client_connected);'

  # Desk Moving Status
  - platform: template
    name: 'Desk Moving'
    id: desk_moving
    icon: 'mdi:engine'
    lambda: 'return abs(id(desk_state).state) == 1;'
    # lambda: |-
    #   if (id(desk_state).state >= -1 && id(desk_state).state <= 1) return abs(id(desk_state).state) == 1;
    #   return invalid;
